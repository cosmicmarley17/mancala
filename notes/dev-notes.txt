board state is stored as a struct
Each array in the struct corresponds to one of the players' side of the board.
Both arrays have 6 elements, for each pit.
There are values for the stores stored as separate variables in the struct.

For example, data for a starting board:

p1_board: [4,4,4,4,4,4]
p1_store: 0
p2_board: [4,4,4,4,4,4]
p2_store: 0
Data for a possible mid-game board:

p1_board: [1,1,5,10,2,8]
p1_store: 4
p2_board: [0,0,3,8,0,1]
p2_store: 5

This board would look like this:
[    ] ( 1) ( 0) ( 8) ( 3) ( 0) ( 0) [    ]
[  5 ]                               [  4 ]
[    ] ( 1) ( 1) ( 5) (10) ( 2) ( 8) [    ]
         A    B    C    D    E    F   STORE

To get position of the hole directly opposite, use this operation:
opposite hole index = 5 - current hole index

---
Thoughts on program organization:
Need to consider if checking for wins and changing current player should occur within the struct and its methods.
Should current_player and winner be stored in the struct?

If winner and current_player variables are moved to MancalaBoard, this is what the driver loop might look like:
```
while board.winner = None {
    play_turn(&mut board);
}
```
because board stores those variables, they don't need to be passed separately.
--------------------------------------------------------------------------------
To start, create a single Rust program that does this all in the terminal.

Later, convert this program into a game logic library, and create a frontend application to run it (a terminal UI).

--------------------------------------------------------------------------------
OFFICIAL GAME RULES

Play
The game begins with one player picking up all of the pieces in any one of the holes on his side.
Moving counter-clockwise, the player deposits one of the stones in each hole until the stones run out.

1. If you run into your own store, deposit one piece in it.
If you run into your opponent's store, skip it.
2. If the last piece you drop is in your own store, you get a free turn.
3. If the last piece you drop is in an empty hole on your side, you capture that piece and any pieces in the hole directly opposite.
4. Always place all captured pieces in your store.

Winning the game
The game ends when all six spaces on one side of the Mancala board are empty.
The player who still has pieces on his side of the board when the game ends captures all of those pieces.
Count all the pieces in each store. The winner is the player with the most pieces.
